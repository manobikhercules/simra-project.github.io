!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){n(1);const o=n(2);window.onload=function(){document.getElementById("deleteInfo").addEventListener("click",(function(t){console.log(t.target.parentNode.parentNode.remove())})),o()}},function(t,e,n){"use strict";n.r(e)},function(t,e,n){let o=n(3);function r(t,e,n,o,r){const a=document.createElement("td");a.setAttribute("data-label",o[e].text),t.appendChild(a);const s=document.createElement("div");s.className="is-flex is-align-items-center";const d=document.createElement("span");d.className="tag is-medium mr-1 is-flex-grow-1";const i=document.createTextNode(n[0].toLocaleString());if(a.setAttribute("sorttable_customkey",n[0].toString()),d.appendChild(i),s.appendChild(d),r){const t=document.createElement("span"),r=document.createElement("span");r.className="unicode-icon",n[1]>0?(t.className="tag "+o[e].tag,r.textContent="⬆"):(t.className="tag",r.textContent="➡");const a=document.createElement("span");a.className="icon-text is-flex-wrap-nowrap";const d=document.createElement("span");d.className="icon mr-0";const i=document.createElement("span");i.appendChild(document.createTextNode(n[1].toLocaleString())),d.appendChild(r),a.appendChild(d),a.appendChild(i),t.appendChild(a),s.appendChild(t)}a.appendChild(s)}t.exports=async function(){let t=document.getElementById("regionTable"),[e,n,a,s]=await Promise.all([fetch("./resources/tableMeta.json"),fetch("./resources/dashboard.json"),fetch("./resources/mapLinks.json"),fetch("./resources/regionNames.json")]),d=await e.json(),i=await n.json(),l=await a.json(),c=await s.json();!function(t){document.getElementById("totalRides").innerHTML=t.totalRides.toLocaleString(),document.getElementById("totalIncidents").innerHTML=t.totalIncidents.toLocaleString(),document.getElementById("totalKm").innerHTML=t.totalKm.toLocaleString(),document.getElementById("sourceDate").innerHTML=t.sourceDate,null!=t.diffDate?document.getElementById("diffDate").innerHTML=t.diffDate:document.getElementById("diffText").style.display="none"}(i),function(t,e,n,o,a){for(const s of e.regions){let d;try{d=a[s.name].DE}catch(t){console.log(s.name+" not found in regionNames.json"),d=s.name}const i=t.insertRow(),l=document.createElement("td");l.setAttribute("data-label",d),l.className="has-text-centered has-text-weight-bold";const c=o[s.name],m=document.createTextNode(d);if(null==c)l.appendChild(m);else{const t=document.createElement("a");t.href=c,t.appendChild(m),l.appendChild(t)}i.appendChild(l);let u=!0;null==e.diffDate&&(u=!1);for(const[t,e]of Object.entries(s))["rides","incidents","scaryIncidents","km"].includes(t)&&r(i,t,e,n,u)}}(t,i,d,l,c),function(t,e){const n=t.createTHead().insertRow();for(const[t,o]of Object.entries(e)){const t=document.createElement("th"),e=document.createElement("abbr");e.title=o.abbr;const r=document.createTextNode(o.text);e.appendChild(r),t.appendChild(e),n.appendChild(t)}}(t,d),o.makeSortable(t)}},function(t,e){
/*@cc_on @*/
if(sorttable={init:function(){arguments.callee.done||(arguments.callee.done=!0,n&&clearInterval(n),document.createElement&&document.getElementsByTagName&&(sorttable.DATE_RE=/^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/,s(document.getElementsByTagName("table"),(function(t){-1!=t.className.search(/\bsortable\b/)&&sorttable.makeSortable(t)}))))},makeSortable:function(t){if(0==t.getElementsByTagName("thead").length&&(the=document.createElement("thead"),the.appendChild(t.rows[0]),t.insertBefore(the,t.firstChild)),null==t.tHead&&(t.tHead=t.getElementsByTagName("thead")[0]),1==t.tHead.rows.length){sortbottomrows=[];for(var e=0;e<t.rows.length;e++)-1!=t.rows[e].className.search(/\bsortbottom\b/)&&(sortbottomrows[sortbottomrows.length]=t.rows[e]);if(sortbottomrows){null==t.tFoot&&(tfo=document.createElement("tfoot"),t.appendChild(tfo));for(e=0;e<sortbottomrows.length;e++)tfo.appendChild(sortbottomrows[e]);delete sortbottomrows}headrow=t.tHead.rows[0].cells;for(e=0;e<headrow.length;e++)headrow[e].className.match(/\bsorttable_nosort\b/)||(mtch=headrow[e].className.match(/\bsorttable_([a-z0-9]+)\b/),mtch&&(override=mtch[1]),mtch&&"function"==typeof sorttable["sort_"+override]?headrow[e].sorttable_sortfunction=sorttable["sort_"+override]:headrow[e].sorttable_sortfunction=sorttable.guessType(t,e),headrow[e].sorttable_columnindex=e,headrow[e].sorttable_tbody=t.tBodies[0],o(headrow[e],"click",sorttable.innerSortFunction=function(t){if(-1!=this.className.search(/\bsorttable_sorted\b/))return sorttable.reverse(this.sorttable_tbody),this.className=this.className.replace("sorttable_sorted","sorttable_sorted_reverse"),this.removeChild(document.getElementById("sorttable_sortfwdind")),sortrevind=document.createElement("span"),sortrevind.id="sorttable_sortrevind",sortrevind.innerHTML="&nbsp;&#x25BE;",void this.appendChild(sortrevind);if(-1!=this.className.search(/\bsorttable_sorted_reverse\b/))return sorttable.reverse(this.sorttable_tbody),this.className=this.className.replace("sorttable_sorted_reverse","sorttable_sorted"),this.removeChild(document.getElementById("sorttable_sortrevind")),sortfwdind=document.createElement("span"),sortfwdind.id="sorttable_sortfwdind",sortfwdind.innerHTML="&nbsp;&#x25B4;",void this.appendChild(sortfwdind);theadrow=this.parentNode,s(theadrow.childNodes,(function(t){1==t.nodeType&&(t.className=t.className.replace("sorttable_sorted_reverse",""),t.className=t.className.replace("sorttable_sorted",""))})),sortfwdind=document.getElementById("sorttable_sortfwdind"),sortfwdind&&sortfwdind.parentNode.removeChild(sortfwdind),sortrevind=document.getElementById("sorttable_sortrevind"),sortrevind&&sortrevind.parentNode.removeChild(sortrevind),this.className+=" sorttable_sorted",sortfwdind=document.createElement("span"),sortfwdind.id="sorttable_sortfwdind",sortfwdind.innerHTML="&nbsp;&#x25B4;",this.appendChild(sortfwdind),row_array=[],col=this.sorttable_columnindex,rows=this.sorttable_tbody.rows;for(var e=0;e<rows.length;e++)row_array[row_array.length]=[sorttable.getInnerText(rows[e].cells[col]),rows[e]];row_array.sort(this.sorttable_sortfunction),tb=this.sorttable_tbody;for(e=0;e<row_array.length;e++)tb.appendChild(row_array[e][1]);delete row_array}))}},guessType:function(t,e){sortfn=sorttable.sort_alpha;for(var n=0;n<t.tBodies[0].rows.length;n++)if(text=sorttable.getInnerText(t.tBodies[0].rows[n].cells[e]),""!=text){if(text.match(/^-?[�$�]?[\d,.]+%?$/))return sorttable.sort_numeric;if(possdate=text.match(sorttable.DATE_RE),possdate){if(first=parseInt(possdate[1]),second=parseInt(possdate[2]),first>12)return sorttable.sort_ddmm;if(second>12)return sorttable.sort_mmdd;sortfn=sorttable.sort_ddmm}}return sortfn},getInnerText:function(t){if(!t)return"";if(hasInputs="function"==typeof t.getElementsByTagName&&t.getElementsByTagName("input").length,null!=t.getAttribute("sorttable_customkey"))return t.getAttribute("sorttable_customkey");if(void 0!==t.textContent&&!hasInputs)return t.textContent.replace(/^\s+|\s+$/g,"");if(void 0!==t.innerText&&!hasInputs)return t.innerText.replace(/^\s+|\s+$/g,"");if(void 0!==t.text&&!hasInputs)return t.text.replace(/^\s+|\s+$/g,"");switch(t.nodeType){case 3:if("input"==t.nodeName.toLowerCase())return t.value.replace(/^\s+|\s+$/g,"");case 4:return t.nodeValue.replace(/^\s+|\s+$/g,"");case 1:case 11:for(var e="",n=0;n<t.childNodes.length;n++)e+=sorttable.getInnerText(t.childNodes[n]);return e.replace(/^\s+|\s+$/g,"");default:return""}},reverse:function(t){newrows=[];for(var e=0;e<t.rows.length;e++)newrows[newrows.length]=t.rows[e];for(e=newrows.length-1;e>=0;e--)t.appendChild(newrows[e]);delete newrows},sort_numeric:function(t,e){return aa=parseFloat(t[0].replace(/[^0-9.-]/g,"")),isNaN(aa)&&(aa=0),bb=parseFloat(e[0].replace(/[^0-9.-]/g,"")),isNaN(bb)&&(bb=0),aa-bb},sort_alpha:function(t,e){return t[0]==e[0]?0:t[0]<e[0]?-1:1},sort_ddmm:function(t,e){return mtch=t[0].match(sorttable.DATE_RE),y=mtch[3],m=mtch[2],d=mtch[1],1==m.length&&(m="0"+m),1==d.length&&(d="0"+d),dt1=y+m+d,mtch=e[0].match(sorttable.DATE_RE),y=mtch[3],m=mtch[2],d=mtch[1],1==m.length&&(m="0"+m),1==d.length&&(d="0"+d),dt2=y+m+d,dt1==dt2?0:dt1<dt2?-1:1},sort_mmdd:function(t,e){return mtch=t[0].match(sorttable.DATE_RE),y=mtch[3],d=mtch[2],m=mtch[1],1==m.length&&(m="0"+m),1==d.length&&(d="0"+d),dt1=y+m+d,mtch=e[0].match(sorttable.DATE_RE),y=mtch[3],d=mtch[2],m=mtch[1],1==m.length&&(m="0"+m),1==d.length&&(d="0"+d),dt2=y+m+d,dt1==dt2?0:dt1<dt2?-1:1},shaker_sort:function(t,e){for(var n=0,o=t.length-1,r=!0;r;){r=!1;for(var a=n;a<o;++a)if(e(t[a],t[a+1])>0){var s=t[a];t[a]=t[a+1],t[a+1]=s,r=!0}if(o--,!r)break;for(a=o;a>n;--a)if(e(t[a],t[a-1])<0){s=t[a];t[a]=t[a-1],t[a-1]=s,r=!0}n++}}},document.addEventListener&&document.addEventListener("DOMContentLoaded",sorttable.init,!1),/WebKit/i.test(navigator.userAgent))var n=setInterval((function(){/loaded|complete/.test(document.readyState)&&sorttable.init()}),10);function o(t,e,n){if(t.addEventListener)t.addEventListener(e,n,!1);else{n.$$guid||(n.$$guid=o.guid++),t.events||(t.events={});var a=t.events[e];a||(a=t.events[e]={},t["on"+e]&&(a[0]=t["on"+e])),a[n.$$guid]=n,t["on"+e]=r}}function r(t){var e=!0;t=t||a(((this.ownerDocument||this.document||this).parentWindow||window).event);var n=this.events[t.type];for(var o in n)this.$$handleEvent=n[o],!1===this.$$handleEvent(t)&&(e=!1);return e}function a(t){return t.preventDefault=a.preventDefault,t.stopPropagation=a.stopPropagation,t}window.onload=sorttable.init,o.guid=1,a.preventDefault=function(){this.returnValue=!1},a.stopPropagation=function(){this.cancelBubble=!0},Array.forEach||(Array.forEach=function(t,e,n){for(var o=0;o<t.length;o++)e.call(n,t[o],o,t)}),Function.prototype.forEach=function(t,e,n){for(var o in t)void 0===this.prototype[o]&&e.call(n,t[o],o,t)},String.forEach=function(t,e,n){Array.forEach(t.split(""),(function(o,r){e.call(n,o,r,t)}))};var s=function(t,e,n){if(t){var o=Object;if(t instanceof Function)o=Function;else{if(t.forEach instanceof Function)return void t.forEach(e,n);"string"==typeof t?o=String:"number"==typeof t.length&&(o=Array)}o.forEach(t,e,n)}};t.exports=sorttable}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,