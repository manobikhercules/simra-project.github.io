!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){n(1);const o=n(2);window.onload=function(){document.getElementById("deleteInfo").addEventListener("click",(function(e){console.log(e.target.parentNode.parentNode.remove())}));const e=function(e,t=window.location.href){e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}("region");o(e)}},function(e,t,n){"use strict";n.r(t)},function(e,t,n){let o=n(3);function r(e,t,n,o,r,a,s){const d=document.createElement("td");d.setAttribute("data-label",o[t].text),e.appendChild(d);const i=document.createElement("div");i.className="is-flex is-align-items-center";const l=document.createElement("span");let c;if(l.className="tag is-medium mr-1 is-flex-grow-1","incidents"===t&&void 0!==s){c=document.createElement("a"),c.href=s;let e=document.createTextNode(n[0].toLocaleString());c.appendChild(e)}else c=document.createTextNode(n[0].toLocaleString());if(a?d.setAttribute("sorttable_customkey",Number.MAX_SAFE_INTEGER):d.setAttribute("sorttable_customkey",n[0].toString()),l.appendChild(c),i.appendChild(l),r){const e=document.createElement("span"),r=document.createElement("span");r.className="unicode-icon",n[1]>0?(e.className="tag "+o[t].tag,r.textContent="⬆"):(e.className="tag",r.textContent="➡");const a=document.createElement("span");a.className="icon-text is-flex-wrap-nowrap";const s=document.createElement("span");s.className="icon mr-0";const d=document.createElement("span");d.appendChild(document.createTextNode(n[1].toLocaleString())),s.appendChild(r),a.appendChild(s),a.appendChild(d),e.appendChild(a),i.appendChild(e)}d.appendChild(i)}e.exports=async function(e){let t=document.getElementById("regionTable"),[n,a,s,d,i]=await Promise.all([fetch("./resources/tableMeta.json"),fetch("./resources/dashboard.json"),fetch("./resources/mapLinks.json"),fetch("./resources/regionNames.json"),fetch("./resources/incidentLinks.json")]),l=await n.json(),c=await a.json(),m=await s.json(),u=await d.json(),f=await i.json();!function(e){document.getElementById("totalRides").innerHTML=e.totalRides.toLocaleString(),document.getElementById("totalIncidents").innerHTML=e.totalIncidents.toLocaleString(),document.getElementById("totalKm").innerHTML=e.totalKm.toLocaleString(),document.getElementById("sourceDate").innerHTML=e.sourceDate,null!=e.diffDate?document.getElementById("diffDate").innerHTML=e.diffDate:document.getElementById("diffText").style.display="none"}(c),function(e,t,n,o,a,s,d){for(const i of t.regions){const l=i.name===s;let c;try{c=a[i.name].DE}catch(e){console.log(i.name+" not found in regionNames.json"),c=i.name}const m=e.insertRow(),u=document.createElement("td");u.setAttribute("data-label",c),u.className="has-text-centered has-text-weight-bold";const f=o[i.name],h=document.createTextNode(c);if(void 0===f)u.appendChild(h);else{const e=document.createElement("a");e.href=f,e.appendChild(h),u.appendChild(e)}m.appendChild(u);let p=!0;void 0===t.diffDate&&(p=!1);for(const[e,t]of Object.entries(i))["rides","incidents","scaryIncidents","km"].includes(e)&&r(m,e,t,n,p,l,d[i.name])}}(t,c,l,m,u,e,f),function(e,t){const n=e.createTHead().insertRow();for(const[e,o]of Object.entries(t)){const e=document.createElement("th"),t=document.createElement("abbr");t.title=o.abbr;const r=document.createTextNode(o.text);t.appendChild(r),e.appendChild(t),n.appendChild(e)}}(t,l),o.makeSortable(t);const h=t.firstElementChild.firstElementChild.children[1];h.click(),h.click()}},function(e,t){
/*@cc_on @*/
if(sorttable={init:function(){arguments.callee.done||(arguments.callee.done=!0,n&&clearInterval(n),document.createElement&&document.getElementsByTagName&&(sorttable.DATE_RE=/^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/,s(document.getElementsByTagName("table"),(function(e){-1!=e.className.search(/\bsortable\b/)&&sorttable.makeSortable(e)}))))},makeSortable:function(e){if(0==e.getElementsByTagName("thead").length&&(the=document.createElement("thead"),the.appendChild(e.rows[0]),e.insertBefore(the,e.firstChild)),null==e.tHead&&(e.tHead=e.getElementsByTagName("thead")[0]),1==e.tHead.rows.length){sortbottomrows=[];for(var t=0;t<e.rows.length;t++)-1!=e.rows[t].className.search(/\bsortbottom\b/)&&(sortbottomrows[sortbottomrows.length]=e.rows[t]);if(sortbottomrows){null==e.tFoot&&(tfo=document.createElement("tfoot"),e.appendChild(tfo));for(t=0;t<sortbottomrows.length;t++)tfo.appendChild(sortbottomrows[t]);delete sortbottomrows}headrow=e.tHead.rows[0].cells;for(t=0;t<headrow.length;t++)headrow[t].className.match(/\bsorttable_nosort\b/)||(mtch=headrow[t].className.match(/\bsorttable_([a-z0-9]+)\b/),mtch&&(override=mtch[1]),mtch&&"function"==typeof sorttable["sort_"+override]?headrow[t].sorttable_sortfunction=sorttable["sort_"+override]:headrow[t].sorttable_sortfunction=sorttable.guessType(e,t),headrow[t].sorttable_columnindex=t,headrow[t].sorttable_tbody=e.tBodies[0],o(headrow[t],"click",sorttable.innerSortFunction=function(e){if(-1!=this.className.search(/\bsorttable_sorted\b/))return sorttable.reverse(this.sorttable_tbody),this.className=this.className.replace("sorttable_sorted","sorttable_sorted_reverse"),this.removeChild(document.getElementById("sorttable_sortfwdind")),sortrevind=document.createElement("span"),sortrevind.id="sorttable_sortrevind",sortrevind.innerHTML="&nbsp;&#x25BE;",void this.appendChild(sortrevind);if(-1!=this.className.search(/\bsorttable_sorted_reverse\b/))return sorttable.reverse(this.sorttable_tbody),this.className=this.className.replace("sorttable_sorted_reverse","sorttable_sorted"),this.removeChild(document.getElementById("sorttable_sortrevind")),sortfwdind=document.createElement("span"),sortfwdind.id="sorttable_sortfwdind",sortfwdind.innerHTML="&nbsp;&#x25B4;",void this.appendChild(sortfwdind);theadrow=this.parentNode,s(theadrow.childNodes,(function(e){1==e.nodeType&&(e.className=e.className.replace("sorttable_sorted_reverse",""),e.className=e.className.replace("sorttable_sorted",""))})),sortfwdind=document.getElementById("sorttable_sortfwdind"),sortfwdind&&sortfwdind.parentNode.removeChild(sortfwdind),sortrevind=document.getElementById("sorttable_sortrevind"),sortrevind&&sortrevind.parentNode.removeChild(sortrevind),this.className+=" sorttable_sorted",sortfwdind=document.createElement("span"),sortfwdind.id="sorttable_sortfwdind",sortfwdind.innerHTML="&nbsp;&#x25B4;",this.appendChild(sortfwdind),row_array=[],col=this.sorttable_columnindex,rows=this.sorttable_tbody.rows;for(var t=0;t<rows.length;t++)row_array[row_array.length]=[sorttable.getInnerText(rows[t].cells[col]),rows[t]];row_array.sort(this.sorttable_sortfunction),tb=this.sorttable_tbody;for(t=0;t<row_array.length;t++)tb.appendChild(row_array[t][1]);delete row_array}))}},guessType:function(e,t){sortfn=sorttable.sort_alpha;for(var n=0;n<e.tBodies[0].rows.length;n++)if(text=sorttable.getInnerText(e.tBodies[0].rows[n].cells[t]),""!=text){if(text.match(/^-?[�$�]?[\d,.]+%?$/))return sorttable.sort_numeric;if(possdate=text.match(sorttable.DATE_RE),possdate){if(first=parseInt(possdate[1]),second=parseInt(possdate[2]),first>12)return sorttable.sort_ddmm;if(second>12)return sorttable.sort_mmdd;sortfn=sorttable.sort_ddmm}}return sortfn},getInnerText:function(e){if(!e)return"";if(hasInputs="function"==typeof e.getElementsByTagName&&e.getElementsByTagName("input").length,null!=e.getAttribute("sorttable_customkey"))return e.getAttribute("sorttable_customkey");if(void 0!==e.textContent&&!hasInputs)return e.textContent.replace(/^\s+|\s+$/g,"");if(void 0!==e.innerText&&!hasInputs)return e.innerText.replace(/^\s+|\s+$/g,"");if(void 0!==e.text&&!hasInputs)return e.text.replace(/^\s+|\s+$/g,"");switch(e.nodeType){case 3:if("input"==e.nodeName.toLowerCase())return e.value.replace(/^\s+|\s+$/g,"");case 4:return e.nodeValue.replace(/^\s+|\s+$/g,"");case 1:case 11:for(var t="",n=0;n<e.childNodes.length;n++)t+=sorttable.getInnerText(e.childNodes[n]);return t.replace(/^\s+|\s+$/g,"");default:return""}},reverse:function(e){newrows=[];for(var t=0;t<e.rows.length;t++)newrows[newrows.length]=e.rows[t];for(t=newrows.length-1;t>=0;t--)e.appendChild(newrows[t]);delete newrows},sort_numeric:function(e,t){return aa=parseFloat(e[0].replace(/[^0-9.-]/g,"")),isNaN(aa)&&(aa=0),bb=parseFloat(t[0].replace(/[^0-9.-]/g,"")),isNaN(bb)&&(bb=0),aa-bb},sort_alpha:function(e,t){return e[0]==t[0]?0:e[0]<t[0]?-1:1},sort_ddmm:function(e,t){return mtch=e[0].match(sorttable.DATE_RE),y=mtch[3],m=mtch[2],d=mtch[1],1==m.length&&(m="0"+m),1==d.length&&(d="0"+d),dt1=y+m+d,mtch=t[0].match(sorttable.DATE_RE),y=mtch[3],m=mtch[2],d=mtch[1],1==m.length&&(m="0"+m),1==d.length&&(d="0"+d),dt2=y+m+d,dt1==dt2?0:dt1<dt2?-1:1},sort_mmdd:function(e,t){return mtch=e[0].match(sorttable.DATE_RE),y=mtch[3],d=mtch[2],m=mtch[1],1==m.length&&(m="0"+m),1==d.length&&(d="0"+d),dt1=y+m+d,mtch=t[0].match(sorttable.DATE_RE),y=mtch[3],d=mtch[2],m=mtch[1],1==m.length&&(m="0"+m),1==d.length&&(d="0"+d),dt2=y+m+d,dt1==dt2?0:dt1<dt2?-1:1},shaker_sort:function(e,t){for(var n=0,o=e.length-1,r=!0;r;){r=!1;for(var a=n;a<o;++a)if(t(e[a],e[a+1])>0){var s=e[a];e[a]=e[a+1],e[a+1]=s,r=!0}if(o--,!r)break;for(a=o;a>n;--a)if(t(e[a],e[a-1])<0){s=e[a];e[a]=e[a-1],e[a-1]=s,r=!0}n++}}},document.addEventListener&&document.addEventListener("DOMContentLoaded",sorttable.init,!1),/WebKit/i.test(navigator.userAgent))var n=setInterval((function(){/loaded|complete/.test(document.readyState)&&sorttable.init()}),10);function o(e,t,n){if(e.addEventListener)e.addEventListener(t,n,!1);else{n.$$guid||(n.$$guid=o.guid++),e.events||(e.events={});var a=e.events[t];a||(a=e.events[t]={},e["on"+t]&&(a[0]=e["on"+t])),a[n.$$guid]=n,e["on"+t]=r}}function r(e){var t=!0;e=e||a(((this.ownerDocument||this.document||this).parentWindow||window).event);var n=this.events[e.type];for(var o in n)this.$$handleEvent=n[o],!1===this.$$handleEvent(e)&&(t=!1);return t}function a(e){return e.preventDefault=a.preventDefault,e.stopPropagation=a.stopPropagation,e}window.onload=sorttable.init,o.guid=1,a.preventDefault=function(){this.returnValue=!1},a.stopPropagation=function(){this.cancelBubble=!0},Array.forEach||(Array.forEach=function(e,t,n){for(var o=0;o<e.length;o++)t.call(n,e[o],o,e)}),Function.prototype.forEach=function(e,t,n){for(var o in e)void 0===this.prototype[o]&&t.call(n,e[o],o,e)},String.forEach=function(e,t,n){Array.forEach(e.split(""),(function(o,r){t.call(n,o,r,e)}))};var s=function(e,t,n){if(e){var o=Object;if(e instanceof Function)o=Function;else{if(e.forEach instanceof Function)return void e.forEach(t,n);"string"==typeof e?o=String:"number"==typeof e.length&&(o=Array)}o.forEach(e,t,n)}};e.exports=sorttable}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,